/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.11
 * Generated at: 2022-07-25 19:52:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;
import com.thx.priv.data.Message;
import javax.imageio.ImageIO;
import javax.xml.bind.DatatypeConverter;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import com.google.zxing.qrcode.QRCodeWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.client.j2se.MatrixToImageWriter;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.thx.priv.data.Message");
    _jspx_imports_classes.add("java.io.ByteArrayOutputStream");
    _jspx_imports_classes.add("com.google.zxing.client.j2se.MatrixToImageWriter");
    _jspx_imports_classes.add("java.awt.image.BufferedImage");
    _jspx_imports_classes.add("com.google.zxing.qrcode.QRCodeWriter");
    _jspx_imports_classes.add("javax.imageio.ImageIO");
    _jspx_imports_classes.add("com.google.zxing.common.BitMatrix");
    _jspx_imports_classes.add("javax.xml.bind.DatatypeConverter");
    _jspx_imports_classes.add("com.google.zxing.BarcodeFormat");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <title>Nothing to see here</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<br/>\n");
      out.write("<form action=\"/messages\" method=\"post\">\n");
      out.write("    <textarea id=\"message\" name=\"message\" cols=\"60\" rows=\"6\"></textarea>\n");
      out.write("    <br/>\n");
      out.write("    <input type=\"submit\" value=\"Post\">\n");
      out.write("</form>\n");
      out.write("<br/>\n");
      out.write("<form action=\"/messages\" method=\"post\">\n");
      out.write("<table>\n");

    ArrayList<Message> messages = (ArrayList<Message>) request.getServletContext().getAttribute("messages");
    if(messages != null) {
        QRCodeWriter barcodeWriter = new QRCodeWriter();
        boolean encodedMsgs = false;
        for (Message msg: messages) {

      out.write("\n");
      out.write("    <tr>\n");
      out.write("        ");

            if(msg.isDecoded()) {
                BitMatrix bitMatrix = barcodeWriter.encode(msg.getCipherText(), BarcodeFormat.QR_CODE, 75, 75);
                BufferedImage bImage = MatrixToImageWriter.toBufferedImage(bitMatrix);
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                ImageIO.write(bImage, "png", baos);
                baos.flush();
                byte[] imageInByteArray = baos.toByteArray();
                baos.close();
                String b64 = DatatypeConverter.printBase64Binary(imageInByteArray);
        
      out.write("\n");
      out.write("        <td>\n");
      out.write("            <img src=\"data:image/png;base64, ");
      out.print(b64);
      out.write("\" alt=\"png not found\" />\n");
      out.write("        </td>\n");
      out.write("        <td><button name=\"delete\" type=\"submit\" value=\"");
      out.print(msg.getId());
      out.write("\">Delete</button></td>\n");
      out.write("        ");

            } else {
                encodedMsgs = true;
        
      out.write("\n");
      out.write("        <td>");
      out.print(msg.getCoordinates()[0] + 1);
      out.write(':');
      out.print(msg.getCoordinates()[1] + 1);
      out.write("</td>\n");
      out.write("        <td>");
      out.print(msg.getCoordinates()[2] + 1);
      out.write(':');
      out.print(msg.getCoordinates()[3] + 1);
      out.write("</td>\n");
      out.write("        <td><button name=\"msgid\" type=\"submit\" value=\"");
      out.print(msg.getId());
      out.write("\">Decode</button></td>\n");
      out.write("        ");

            }
        
      out.write("\n");
      out.write("    </tr>\n");

        }
        if(encodedMsgs) {

      out.write("\n");
      out.write("</table>\n");
      out.write("<br/>\n");
      out.write("<input type=\"password\" id=\"password\" name=\"password\">\n");

        }
    }

      out.write("\n");
      out.write("</form>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
